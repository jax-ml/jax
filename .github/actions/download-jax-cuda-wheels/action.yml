# Composite action to download the jax, jaxlib, and the CUDA plugin wheels
name: Download JAX CUDA wheels

inputs:
  python:
    description: "Which python version should the artifact be downloaded for?"
    type: string
    required: true
  cuda-version:
    description: "Which cuda version should the artifact be downloaded for?"
    type: string
    default: "12"
  use-nvidia-pip-wheels:
    description: "Whether to download Nvidia CUDA packages from PyPI?"
    type: boolean
    default: false
  jaxlib-version:
    description: "Which jaxlib version to download? (head/pypi_latest)"
    type: string
    default: "head"
  download-jax-from-gcs:
    description: "Whether to download the jax wheel from GCS"
    default: '1'
    type: string
  skip-download-jaxlib-and-cuda-plugins-from-gcs:
    description: "Whether to skip downloading the jaxlib and cuda plugins from GCS (e.g for testing a jax only release)"
    default: '0'
    type: string
  gcs_download_uri:
    description: "GCS location prefix from where the artifacts should be downloaded"
    default: 'gs://general-ml-ci-transient/jax-github-actions/jax/${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'
    type: string
permissions: {}
runs:
  using: "composite"

  steps:
    # Note that certain envs such as JAXCI_HERMETIC_PYTHON_VERSION are set by the calling workflow.
    - name: Set env vars for use in artifact download URL
      shell: bash
      run: |
        os=$(uname -s | awk '{print tolower($0)}')
        arch=$(uname -m)

        # Get the major and minor version of Python.
        # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.11, then python_major_minor=311
        # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.13-nogil, then python_major_minor=313t
        python_major_minor=$(echo "${JAXCI_HERMETIC_PYTHON_VERSION//-nogil/t}" | tr -d '.')

        echo "OS=${os}" >> $GITHUB_ENV
        echo "ARCH=${arch}" >> $GITHUB_ENV
        # Python wheels follow a naming convention: standard wheels use the pattern
        # `*-cp<py_version>-cp<py_version>-*`, while free-threaded wheels use
        # `*-cp<py_version>-cp<py_version>t-*`.
        echo "PYTHON_MAJOR_MINOR=cp${python_major_minor%t}-cp${python_major_minor}-" >> $GITHUB_ENV

        # Get the CUDA major version only
        full_cuda_version="${{ inputs.cuda-version }}"
        echo "JAXCI_CUDA_VERSION=${full_cuda_version%%.*}" >> $GITHUB_ENV
    - name: Download wheels
      shell: bash
      id: download-wheel-artifacts
      # Set continue-on-error to true to prevent actions from failing the workflow if this step
      # fails. Instead, we verify the outcome in the next step so that we can print a more
      # informative error message.
      continue-on-error: true
      run: |
        mkdir -p $(pwd)/dist
        if [[ "${{ inputs.download-jax-from-gcs }}" == "1" ]]; then
          gcloud storage cp -r "${{ inputs.gcs_download_uri }}"/jax*py3*none*any.whl $(pwd)/dist/
        else
          echo "JAX wheel won't be downloaded, only jaxlib pre-built wheel is tested."
        fi

        # Do not download the jaxlib and CUDA plugin artifacts if we are testing a jax only
        # release.
        if [[ "${{ inputs.skip-download-jaxlib-and-cuda-plugins-from-gcs }}" == "1" ]]; then
          echo "JAX only release. Only downloading the jax wheel from the release bucket."
        else
          if [[ ${{ inputs.jaxlib-version }} == "head" ]]; then
            gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jaxlib*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/
            gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jax*cuda${JAXCI_CUDA_VERSION}*plugin*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/
            gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jax*cuda${JAXCI_CUDA_VERSION}*pjrt*${OS}*${ARCH}*.whl" $(pwd)/dist/
          elif [[ ${{ inputs.jaxlib-version }} == "pypi_latest" ]]; then
            PYTHON=python${{ inputs.python }}
            $PYTHON -m pip download jaxlib jax-cuda${JAXCI_CUDA_VERSION}-pjrt jax-cuda${JAXCI_CUDA_VERSION}-plugin --dest $(pwd)/dist/
          else
            echo "Invalid jaxlib version: ${{ inputs.jaxlib-version }}"
            exit 1
          fi
        fi
    - name: Skip the test run if the wheel artifacts were not downloaded successfully
      shell: bash
      if: steps.download-wheel-artifacts.outcome == 'failure'
      run: |
        echo "Failed to download wheel artifacts. Please check if the wheels were"
        echo "built successfully by the artifact build jobs and are available in the GCS bucket if
        echo "downloading from GCS."
        echo "Skipping the test run."
        exit 1
