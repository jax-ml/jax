# CI - Pytest CUDA
#
# This workflow runs the CUDA tests with Pytest. It can only be triggered by other workflows via
# `workflow_call`. It is used by the `CI - Wheel Tests` workflows to run the Pytest CUDA tests.
#
# It consists of the following job:
# run-tests:
#    - Downloads the jaxlib and CUDA artifacts from a GCS bucket.
#    - Executes the `run_pytest_cuda.sh` script, which performs the following actions:
#      - Installs the downloaded wheel artifacts.
#      - Runs the CUDA tests with Pytest.
name: CI - Pytest CUDA

on:
  workflow_call:
    inputs:
      runner:
        description: "Which runner should the workflow run on?"
        type: string
        default: "linux-x86-n2-16"
      python:
        description: "Which python version to test?"
        type: string
        default: "3.12"
      cuda-version:
        description: "Which CUDA version to test?"
        type: string
        default: "12.8"
      use-nvidia-pip-wheels:
        description: "Whether to download CUDA packages from PyPI?"
        type: boolean
        default: false
      enable-x64:
        description: "Should x64 mode be enabled?"
        type: string
        default: "0"
      download-jax-only-from-gcs:
        description: "Whether to download only the jax wheel from GCS (e.g for testing a jax only release)"
        default: '0'
        type: string
      gcs_download_uri:
        description: "GCS location prefix from where the artifacts should be downloaded"
        default: 'gs://general-ml-ci-transient/jax-github-actions/jax/${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'
        type: string
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: string
        default: 'no'
permissions: {}
jobs:
  run-tests:
    defaults:
      run:
        # Set the shell to bash as GitHub actions run with /bin/sh by default
        shell: bash
    runs-on: ${{ inputs.runner }}
    # Test the oldest and newest supported CUDA versions.
    # If testing the CUDA packages from PyPI, then use the ml-build image which does not have any
    # CUDA pckages installed on the system.
    container:  ${{ !inputs.use-nvidia-pip-wheels && (contains(inputs.cuda-version, '12.1') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build-cuda12.1-cudnn9.8:latest') ||
                !inputs.use-nvidia-pip-wheels && (contains(inputs.cuda-version, '12.8') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build-cuda12.8-cudnn9.8:latest') ||
                inputs.use-nvidia-pip-wheels && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build:latest'}}
    name: "${{ (contains(inputs.runner, 'h100') && 'h100') ||
        (contains(inputs.runner, 'b200') && 'b200') ||
        (contains(inputs.runner, 'l4') && 'l4') }}, CUDA ${{ inputs.cuda-version }}, py ${{ inputs.python }}, x64=${{ inputs.enable-x64 }}"

    env:
      JAXCI_HERMETIC_PYTHON_VERSION: "${{ inputs.python }}"
      JAXCI_PYTHON: "python${{ inputs.python }}"
      JAXCI_ENABLE_X64: "${{ inputs.enable-x64 }}"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set env vars for use in artifact download URL
        run: |
          os=$(uname -s | awk '{print tolower($0)}')
          arch=$(uname -m)

          # Get the major and minor version of Python.
          # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.11, then python_major_minor=311
          # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.13-nogil, then python_major_minor=313t
          python_major_minor=$(echo "${JAXCI_HERMETIC_PYTHON_VERSION//-nogil/t}" | tr -d '.')

          echo "OS=${os}" >> $GITHUB_ENV
          echo "ARCH=${arch}" >> $GITHUB_ENV
          # Python wheels follow a naming convention: standard wheels use the pattern
          # `*-cp<py_version>-cp<py_version>-*`, while free-threaded wheels use
          # `*-cp<py_version>-cp<py_version>t-*`.
          echo "PYTHON_MAJOR_MINOR=cp${python_major_minor%t}-cp${python_major_minor}-" >> $GITHUB_ENV
      - name: Download wheels from GCS
        id: download-wheel-artifacts
        # Set continue-on-error to true to prevent actions from failing the workflow if this step
        # fails. Instead, we verify the outcome in the next step so that we can print a more
        # informative error message.
        continue-on-error: true
        run: |
          mkdir -p $(pwd)/dist
          gcloud storage cp -r "${{ inputs.gcs_download_uri }}"/jax*py3*none*any.whl $(pwd)/dist/

          # Do not download the jaxlib and CUDA plugin artifacts if we are testing a jax only
          # release.
          if [[ "${{ inputs.download-jax-only-from-gcs }}" == "1" ]]; then
            echo "JAX only release. Only downloading the jax wheel from the release bucket."

            if [[ "${{ inputs.use-nvidia-pip-wheels }}" == false ]]; then
              # Install only the PJRT and JAX CUDA Plugin packages from PyPI. Nvidia CUDA packages
              # are used from the system.
              echo "JAXCI_JAX_PYPI_EXTRAS=cuda12-local">> $GITHUB_ENV
            else
             # Install the PJRT, JAX CUDA Plugin, and Nvidia CUDA packages from PyPI.
              echo "JAXCI_JAX_PYPI_EXTRAS=cuda12">> $GITHUB_ENV
            fi
          else
            gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jaxlib*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/ &&
            gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jax*cuda*plugin*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/ &&
            gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jax*cuda*pjrt*${OS}*${ARCH}*.whl" $(pwd)/dist/

             if [[ "${{ inputs.use-nvidia-pip-wheels }}" == true ]]; then
              # Install the Nvidia CUDA packages from PyPI. The wheels downloaded in the previous
              # step will be used for the PJRT and JAX CUDA Plugin packages.
              echo "JAXCI_JAX_PYPI_EXTRAS=cuda12">> $GITHUB_ENV
             fi
          fi
      - name: Skip the test run if the wheel artifacts were not downloaded successfully
        if: steps.download-wheel-artifacts.outcome == 'failure'
        run: |
          echo "Failed to download wheel artifacts from GCS. Please check if the wheels were"
          echo "built successfully by the artifact build jobs and are available in the GCS bucket."
          echo "Skipping the test run."
          exit 1
      - name: Install Python dependencies
        run: |
          # For prerelease python 3.14, some pre-built dependency wheels aren't available,
          # so we need to download their deps or build them from source.
          if [[ $JAXCI_PYTHON == "python3.14" ]]; then
            # Build numpy from source
            # Need to include fixes for https://github.com/numpy/numpy/issues/28681.
            $JAXCI_PYTHON -m uv pip install "git+https://github.com/numpy/numpy@v2.3.0"

            # Install build requirements for scipy
            apt update && apt upgrade -y && apt-get install -y gfortran libopenblas-dev liblapack-dev pkg-config --no-install-recommends
            $JAXCI_PYTHON -m uv pip install "git+https://github.com/scipy/scipy@main"

            # Install build requirements for pillow
            apt install -q -y libjpeg-dev --no-install-recommends
          fi

          $JAXCI_PYTHON -m uv pip install -r build/test-requirements.txt
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@7f5ca0c263a81ed09ea276524c1b9192f1304e3c
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: Run Pytest CUDA tests
        timeout-minutes: 120
        run: ./ci/run_pytest_cuda.sh