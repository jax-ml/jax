# CI - Pytest CUDA
#
# This workflow runs the CUDA tests with Pytest. It can only be triggered by other workflows via
# `workflow_call`. It is used by the `CI - Wheel Tests` workflows to run the Pytest CUDA tests.
#
# It consists of the following job:
# run-tests:
#    - Downloads the jaxlib and CUDA artifacts from a GCS bucket.
#    - Executes the `run_pytest_cuda.sh` script, which performs the following actions:
#      - Installs the downloaded wheel artifacts.
#      - Runs the CUDA tests with Pytest.
name: CI - Pytest CUDA

on:
  workflow_call:
    inputs:
      runner:
        description: "Which runner should the workflow run on?"
        type: string
        required: true
        default: "linux-x86-n2-16"
      python:
        description: "Which python version to test?"
        type: string
        required: true
        default: "3.12"
      cuda:
        description: "Which CUDA version to test?"
        type: string
        required: true
        default: "12.3"
      enable-x64:
        description: "Should x64 mode be enabled?"
        type: string
        required: true
        default: "0"
      download-jax-only-from-gcs:
        description: "Whether to download only the jax wheel from GCS (e.g for testing a jax only release)"
        required: false
        default: '0'
        type: string
      gcs_download_uri:
        description: "GCS location prefix from where the artifacts should be downloaded"
        required: true
        default: 'gs://general-ml-ci-transient/jax-github-actions/jax/${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'
        type: string
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: string
        required: false
        default: 'no'

jobs:
  run-tests:
    defaults:
      run:
        # Set the shell to bash as GitHub actions run with /bin/sh by default
        shell: bash
    runs-on: ${{ inputs.runner }}
    # Test the oldest and newest supported CUDA versions.
    container:  ${{ (contains(inputs.cuda, '12.1') && 'us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build-cuda12.1-cudnn9.8:latest') ||
                (contains(inputs.cuda, '12.8') && 'us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build-cuda12.8-cudnn9.8:latest') }}
    name: "Pytest CUDA (${{ inputs.runner }}, CUDA ${{ inputs.cuda }}, Python ${{ inputs.python }}, x64=${{ inputs.enable-x64 }})"

    env:
      JAXCI_HERMETIC_PYTHON_VERSION: "${{ inputs.python }}"
      JAXCI_PYTHON: "python${{ inputs.python }}"
      JAXCI_ENABLE_X64: "${{ inputs.enable-x64 }}"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set env vars for use in artifact download URL
        run: |
          os=$(uname -s | awk '{print tolower($0)}')
          arch=$(uname -m)

          # Get the major and minor version of Python.
          # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.10, then python_major_minor=310
          # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.13-nogil, then python_major_minor=313t
          python_major_minor=$(echo "${JAXCI_HERMETIC_PYTHON_VERSION//-nogil/t}" | tr -d '.')

          echo "OS=${os}" >> $GITHUB_ENV
          echo "ARCH=${arch}" >> $GITHUB_ENV
          # Python wheels follow a naming convention: standard wheels use the pattern
          # `*-cp<py_version>-cp<py_version>-*`, while free-threaded wheels use
          # `*-cp<py_version>-cp<py_version>t-*`.
          echo "PYTHON_MAJOR_MINOR=cp${python_major_minor%t}-cp${python_major_minor}-" >> $GITHUB_ENV
      - name: Download wheels from GCS
        id: download-wheel-artifacts
        # Set continue-on-error to true to prevent actions from failing the workflow if this step
        # fails. Instead, we verify the outcome in the next step so that we can print a more
        # informative error message.
        continue-on-error: true
        run: |
          mkdir -p $(pwd)/dist
          gsutil -m cp -r "${{ inputs.gcs_download_uri }}"/jax*py3*none*any.whl $(pwd)/dist/

          # Do not download the jaxlib and CUDA plugin artifacts if we are testing a jax only
          # release.
          if [[ "${{ inputs.download-jax-only-from-gcs }}" == "1" ]]; then
            echo "JAX only release. Only downloading the jax wheel from the release bucket."

            # Set the env var to install the CUDA plugin and PJRT packages from PyPI. jaxlib is
            # required dependency of jax so that gets installed automatically.
            echo "JAXCI_ADDITIONAL_WHEELS_INSTALL_FROM_PYPI=jax_cuda_pypi">> $GITHUB_ENV
          else
            gsutil -m cp -r "${{ inputs.gcs_download_uri }}/jaxlib*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/ &&
            gsutil -m cp -r "${{ inputs.gcs_download_uri }}/jax*cuda*plugin*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/ &&
            gsutil -m cp -r "${{ inputs.gcs_download_uri }}/jax*cuda*pjrt*${OS}*${ARCH}*.whl" $(pwd)/dist/
          fi
      - name: Skip the test run if the wheel artifacts were not downloaded successfully
        if: steps.download-wheel-artifacts.outcome == 'failure'
        run: |
          echo "Failed to download wheel artifacts from GCS. Please check if the wheels were"
          echo "built successfully by the artifact build jobs and are available in the GCS bucket."
          echo "Skipping the test run."
          exit 1
      - name: Install Python dependencies
        run: $JAXCI_PYTHON -m uv pip install -r build/test-requirements.txt
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@main
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: Run Pytest CUDA tests
        timeout-minutes: 60
        run: ./ci/run_pytest_cuda.sh