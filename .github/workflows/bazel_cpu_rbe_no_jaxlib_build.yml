# CI - Bazel CPU tests with py_import (RBE)
#
# This workflow runs the Bazel CPU tests with py_import dependency. It can only be triggered by
# other workflows via `workflow_call`. It is used by the `CI - Wheel Tests (Continuous)` workflows
# to run the Bazel CPU tests.
#
# It consists of the following job:
# run-tests:
#    - Executes the `run_bazel_test_cpu_py_import_rbe.sh` script, which performs the following actions:
#      - Runs the Bazel CPU tests with py_import dependency.
name: CI - Bazel CPU tests with py_import (RBE)
permissions: {}
on:
  workflow_call:
    inputs:
      runner:
        description: "Which runner should the workflow run on?"
        type: string
        default: "linux-x86-n2-16"
      python:
        description: "Which python version to test?"
        type: string
        default: "3.12"
      enable-x64:
        description: "Should x64 mode be enabled?"
        type: string
        default: "0"
      halt-for-connection:
        description: 'Should this workflow run wait for a remote connection?'
        type: string
        default: 'no'
      build_jaxlib:
        description: 'Should jaxlib be built from source?'
        required: false
        default: 'false'
        type: string
      gcs_download_uri:
        description: "GCS location prefix from where the artifacts should be downloaded"
        default: 'gs://general-ml-ci-transient/jax-github-actions/jax/${{ github.workflow }}/${{ github.run_number }}/${{ github.run_attempt }}'
        type: string

jobs:
  run-tests:
    defaults:
      run:
        # Explicitly set the shell to bash
        shell: bash
    runs-on: ${{ inputs.runner }}
    container: ${{ (contains(inputs.runner, 'linux-x86') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build:latest') ||
                   (contains(inputs.runner, 'linux-arm64') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build-arm64:latest') }}
    env:
      JAXCI_HERMETIC_PYTHON_VERSION: ${{ inputs.python }}
      JAXCI_ENABLE_X64: ${{ inputs.enable-x64 }}
      JAXCI_BUILD_JAXLIB: ${{ inputs.build_jaxlib }}

    name: "${{ (contains(inputs.runner, 'linux-x86') && 'linux x86') ||
        (contains(inputs.runner, 'linux-arm64') && 'linux arm64') }}, py ${{ inputs.python }}, x64=${{ inputs.enable-x64 }}"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Set env vars for use in artifact download URL
        if: ${{ inputs.build_jaxlib == 'false' }}
        run: |
          os=$(uname -s | awk '{print tolower($0)}')
          arch=$(uname -m)

          # Adjust os and arch for Windows
          if [[  $os  =~ "msys_nt" ]] && [[ $arch =~ "x86_64" ]]; then
            os="win"
            arch="amd64"
          fi

          # Get the major and minor version of Python.
          # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.10, then python_major_minor=310
          # E.g if JAXCI_HERMETIC_PYTHON_VERSION=3.13-nogil, then python_major_minor=313t
          python_major_minor=$(echo "${JAXCI_HERMETIC_PYTHON_VERSION//-nogil/t}" | tr -d '.')

          echo "OS=${os}" >> $GITHUB_ENV
          echo "ARCH=${arch}" >> $GITHUB_ENV
          # Python wheels follow a naming convention: standard wheels use the pattern
          # `*-cp<py_version>-cp<py_version>-*`, while free-threaded wheels use
          # `*-cp<py_version>-cp<py_version>t-*`.
          echo "PYTHON_MAJOR_MINOR=cp${python_major_minor%t}-cp${python_major_minor}-" >> $GITHUB_ENV
      - name: Download wheels from GCS (non-Windows runs)
        id: download-wheel-artifacts-nw
        # Set continue-on-error to true to prevent actions from failing the workflow if this step
        # fails. Instead, we verify the outcome in the step below so that we can print a more
        # informative error message.
        continue-on-error: true
        if: ${{ inputs.build_jaxlib == 'false' && !contains(inputs.runner, 'windows-x86') }}
        run: |
          mkdir -p $(pwd)/dist
          gcloud storage cp -r "${{ inputs.gcs_download_uri }}"/jax*py3*none*any.whl $(pwd)/dist/
          gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jaxlib*${PYTHON_MAJOR_MINOR}*${OS}*${ARCH}*.whl" $(pwd)/dist/
      - name: Download wheels from GCS (Windows runs)
        id: download-wheel-artifacts-w
        # Set continue-on-error to true to prevent actions from failing the workflow if this step
        # fails. Instead, we verify the outcome in step below so that we can print a more
        # informative error message.
        continue-on-error: true
        if: ${{ inputs.build_jaxlib == 'false' && contains(inputs.runner, 'windows-x86') }}
        shell: cmd
        run: |
          mkdir dist
          @REM Use `call` so that we can run sequential gcloud storage commands on Windows
          @REM See https://github.com/GoogleCloudPlatform/gsutil/issues/233#issuecomment-196150652
          call gcloud storage cp -r "${{ inputs.gcs_download_uri }}"/jax*py3*none*any.whl dist/
          call gcloud storage cp -r "${{ inputs.gcs_download_uri }}/jaxlib*%PYTHON_MAJOR_MINOR%*%OS%*%ARCH%*.whl" dist/
      - name: Skip the test run if the wheel artifacts were not downloaded successfully
        if: inputs.build_jaxlib == 'false' && (steps.download-wheel-artifacts-nw.outcome == 'failure' || steps.download-wheel-artifacts-w.outcome == 'failure')
        run: |
          echo "Failed to download wheel artifacts from GCS. Please check if the wheels were"
          echo "built successfully by the artifact build jobs and are available in the GCS bucket."
          echo "Skipping the test run."
          exit 1
      # Halt for testing
      - name: Wait For Connection
        uses: google-ml-infra/actions/ci_connection@7f5ca0c263a81ed09ea276524c1b9192f1304e3c
        with:
          halt-dispatch-input: ${{ inputs.halt-for-connection }}
      - name: "Bazel CPU tests with build_jaxlib=${{ format('{0}', inputs.build_jaxlib) }}"
        timeout-minutes: 60
        run: ./ci/run_bazel_test_cpu_rbe.sh
